buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.0'
        classpath 'me.tatarka:gradle-retrolambda:3.2.4'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
    }
}
apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'


dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:23.2.1'
    compile('com.google.code.gson:gson:2.4') {
        transitive = true
    }
    /*compile ('com.alibaba:fastjson:1.2.4'){
            transitive = true
        }*/
    compile('com.squareup.okhttp:okhttp:2.6.0') {
        transitive = true
    }
    compile('io.reactivex:rxandroid:1.1.0+') {
        transitive = true
    }
    compile('io.reactivex:rxjava:1.1.0+') {
        transitive = true
    }
    compile('org.litepal.android:core:1.3.0') {
        transitive = true
    }
    compile('com.facebook.fresco:fresco:0.8.1+') {
        transitive = true
    }
    debugCompile('com.squareup.leakcanary:leakcanary-android:1.3.1') {
        transitive = true
    }
    releaseCompile('com.squareup.leakcanary:leakcanary-android-no-op:1.3.1') {
        transitive = true
    }
    compile('com.github.afollestad.material-dialogs:core:0.8.5.7@aar') {
        transitive = true
    }

    //Dagger
    compile 'com.google.dagger:dagger:2.2'
    provided 'com.google.dagger:dagger-compiler:2.2'
}


android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        minSdkVersion 11   //最低支持到3.0
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    buildTypes {
        release {
            minifyEnabled false
//            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

//增加 gradle build 过程监听，可以在 console 中看见相关信息
gradle.addListener new TimingsListener()




class TimingsListener implements TaskExecutionListener, BuildListener {
    private Clock clock
    private timings = []

    @Override
    void beforeExecute(Task task) {
        clock = new org.gradle.util.Clock()
    }

    @Override
    void afterExecute(Task task, TaskState taskState) {
        def ms = clock.timeInMs
        timings.add([ms, task.path])
        task.project.logger.warn "${task.path} took ${ms}ms"
    }

    @Override
    void buildFinished(BuildResult result) {
        println "Task timings:"
        for (timing in timings) {
            if (timing[0] >= 50) {
                printf "%7sms  %s\n", timing
            }
        }
    }

    @Override
    void buildStarted(Gradle gradle) {}

    @Override
    void projectsEvaluated(Gradle gradle) {}

    @Override
    void projectsLoaded(Gradle gradle) {}

    @Override
    void settingsEvaluated(Settings settings) {}
}

uploadArchives {
    repositories {
        mavenDeployer {
            pom.groupId = GROUP_ID
            pom.artifactId = ARTIFACT_ID
            pom.version = VERSION
            repository(url: RELEASE_REPOSITORY_URL) {
                authentication(userName: USERNAME, password: PASSWORD)
            }
            snapshotRepository(url: SNAPSHOT_REPOSITORY_URL) {
                authentication(userName: USERNAME, password: PASSWORD)
            }
        }
    }
}

//显示详细的测试项目通过与失败
tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "passed", "skipped", "failed", "standardOut", "standardError"
        showStandardStreams = true
    }
}

//显示更多的 lint 警告
tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.getDestinationDir()
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

repositories {
    flatDir {
        dirs 'libs' //this way we can find the .aar file in libs folder
    }
    jcenter()
    mavenCentral()
    maven { url "https://jitpack.io" }
}


